import { useState } from 'react';
import { useNavigate } from 'react-router-dom';

const API_BASE = import.meta.env.VITE_API_BASE_URL;

const NewPostPage = () => {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [tagsInput, setTagsInput] = useState('');
  const [files, setFiles] = useState<FileList | null>(null);
  const [coverImage, setCoverImage] = useState<File | null>(null);

  const navigate = useNavigate();

  const token = localStorage.getItem('token');

  const handleSubmit = async () => {
    if (!token) {
      alert('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      navigate('/login');
      return;
    }
    if (!title.trim() || !content.trim()) {
      alert('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
      return;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–µ–≥–æ–≤ –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
    const tagsArray = tagsInput
      .split(',')
      .map(tag => tag.trim())
      .filter(tag => tag.length > 0);

    // 1. –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞
    const res = await fetch(`${API_BASE}/Post`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({
        title: title,
        contentMarkdown: content,
        tags: tagsArray,
        previewImageUrl: previewUrl.trim(),
      }),
    });

    if (!res.ok) {
      alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞');
      return;
    }

    const { id } = await res.json();

    // 2. –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–∫–∏
    if (coverImage) {
      const formData = new FormData();
      formData.append('file', coverImage);
      const resCover = await fetch(`${API_BASE}/Attachment/cover/${id}`, {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formData,
      });
      if (!resCover.ok) {
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏');
        return;
      }
    }

    // 3. –ó–∞–≥—Ä—É–∑–∫–∞ –≤–ª–æ–∂–µ–Ω–∏–π
    if (files && files.length > 0) {
      const formData = new FormData();
      for (let i = 0; i < files.length; i++) {
        formData.append('files', files[i]);
      }
      const uploadRes = await fetch(`${API_BASE}/Attachment/${id}`, {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formData,
      });

      if (!uploadRes.ok) {
        alert('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤');
        return;
      }
    }

    alert('–ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω');
    setTitle('');
    setContent('');
    setTagsInput('');
    setFiles(null);
  };

  const handlePreviewUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file) return;

    // üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ MIME-—Ç–∏–ø–∞
    if (!file.type.startsWith("image/")) {
      alert("–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
      return;
    }

    // üßπ –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ preview, –µ—Å–ª–∏ –±—ã–ª
    if (previewUrl) {
      try {
        const deleteUrl = `${API_BASE}/attachments?url=` + encodeURIComponent(previewUrl);
        await fetch(deleteUrl, {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`
          }
        });
      } catch (err) {
        console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ preview", err);
      }
    }

    // ‚¨Ü –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
    const formData = new FormData();
    formData.append("file", file);

    const res = await fetch(`${API_BASE}/attachments`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${localStorage.getItem("token")}`
      },
      body: formData
    });

    if (!res.ok) {
      alert("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ");
      return;
    }

    const json = await res.json();
    setPreviewUrl(json.url);
  };

  return (
    <div style={{ padding: '2rem' }}>
      <h2>–ù–æ–≤—ã–π –ø–æ—Å—Ç</h2>
      <input
        placeholder="–ó–∞–≥–æ–ª–æ–≤–æ–∫"
        value={title}
        onChange={(e) => setTitle(e.target.value)}
        style={{ width: '100%', marginBottom: '0.5rem' }}
      />
      <textarea
        placeholder="–°–æ–¥–µ—Ä–∂–∏–º–æ–µ (markdown)"
        value={content}
        onChange={(e) => setContent(e.target.value)}
        rows={10}
        style={{ width: '100%', marginBottom: '0.5rem' }}
      />
      <input
        type="file"
        accept="image/*"
        onChange={(e) => setCoverImage(e.target.files?.[0] || null)}
        style={{ marginBottom: '1rem' }}
      />
      <input
        placeholder="–¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: #–ù–æ–≤–æ—Å—Ç–∏#–°–ø–æ—Ä—Ç#–§—É—Ç–±–æ–ª, #–ü–æ–≥–æ–¥–∞)"
        value={tagsInput}
        onChange={(e) => setTagsInput(e.target.value)}
        style={{ width: '100%', marginBottom: '0.5rem' }}
      />
      <input
        type="file"
        multiple
        onChange={(e) => setFiles(e.target.files)}
        style={{ marginBottom: '1rem' }}
      />
      <button onClick={handleSubmit}>–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç</button>
    </div>
  );
};

export default NewPostPage;
